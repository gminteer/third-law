#!/usr/bin/env node

require('dotenv').config();
const faker = require('faker');
const mongoose = require('mongoose');
const models = require('../models');
const errors = require('../errors');
const services = require('../services')(models, errors);

mongoose.connect(process.env.MONGODB_URI, {
  useFindAndModify: false,
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
mongoose.set('debug', true);

const FAKE_USER_COUNT = 2;
const FAKE_USER_VARIANCE = 0;
const FAKE_THOUGHT_COUNT = 4;
const FAKE_THOUGHT_VARIANCE = 0;
const FAKE_REACTION_COUNT = 2;
const FAKE_REACTION_VARIANCE = 0;
const FAKE_FRIEND_COUNT = 0;
const FAKE_FRIEND_VARIANCE = 0;

(async () => {
  const users = [];
  const thoughts = [];
  for (
    let i = Math.floor(Math.random() * FAKE_USER_VARIANCE);
    i < FAKE_USER_COUNT + Math.floor(Math.random() * FAKE_USER_VARIANCE);
    i++
  ) {
    const firstName = faker.name.firstName();
    const lastName = faker.name.lastName();
    const username = faker.internet.userName(firstName, lastName);
    const user = await services.user.create({
      username,
      password: 'password',
      email: faker.internet.email(firstName, lastName),
    });
    users.push(user);
    for (
      let j = Math.floor(Math.random() * FAKE_THOUGHT_VARIANCE);
      j < FAKE_THOUGHT_COUNT + Math.floor(Math.random() * FAKE_THOUGHT_VARIANCE);
      j++
    ) {
      const thought = await services.thought.createThought({
        author: user._id,
        body: faker.lorem.sentence(),
      });
      thoughts.push(thought);
    }
  }
  for (const thought of thoughts) {
    for (
      let i = Math.floor(Math.random() * FAKE_REACTION_VARIANCE);
      i < FAKE_REACTION_COUNT + Math.floor(Math.random() * FAKE_REACTION_VARIANCE);
      i++
    ) {
      thought.reactions.push({
        author: users[Math.floor(Math.random() * users.length)]._id,
        body: faker.lorem.words(),
      });
    }
    await thought.save();
  }
  for (const user of users) {
    for (
      let i = Math.floor(Math.random() * FAKE_FRIEND_VARIANCE);
      i < FAKE_FRIEND_COUNT + Math.floor(Math.random() * FAKE_FRIEND_VARIANCE);
      i++
    )
      user.friends.push(users[Math.floor(Math.random() * users.length)]._id);

    await user.save();
  }
  await mongoose.connection.close();
})();
